structure
 - intro
   - two things to remember
   - premise: automated testing is good
   - problems with automated acceptance testing
   - what is sdd?
 - example
   - example process and application
   - show two scenarios
   - introduce new story
   - show where it affects scenarios
   - discuss things that don't go in the scenarios
   - walk through process for implementing
 - concerns
   - how to drive system
   - fixture code
   - design of underlying code
   - analysis/vision stuff
   - QA/Dev coordination
   - technologies
   - dealing with failing scenarios
 - Twist demo
   - sales pitch
   - show scenario
     - workflow
     - context
     - tags
     - run (mention drivers)
   - navigation
   - add steps
     - reuse
     - unimplemented
     - implement
     - record
   - refactoring
     - extract concept
     - rephrase
 - outro
   - twist
   - acknowledgements
   - sdd summary
   - two things to remember

todo
 - what changes to the application design
 - where do I actually want to refer to "do it like a human"?
 - code snippets when explaining architecture
 - scenarios stay fairly constant throughout project -- they are elaborated
 - move all references to unit tests to fill gaps in acceptance criteria to 'other tests' section at end
 - remove acknowledgements slides
 - remove duplication between action -> scenario stuff and earlier exposition of where scenarios come from

