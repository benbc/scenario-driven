structure
 - intro
   - two things to remember
   - essence/projection
   - premise: automated testing is good
   - problems with automated acceptance testing
   - what is sdd?
 - example
   - example process and application
   - show two scenarios
   - introduce new story
   - show where it affects scenarios
   - discuss things that don't go in the scenarios
   - walk through process for implementing
 - concerns
   - how to drive system
   - fixture code
   - design of underlying code
   - analysis/vision stuff
   - QA/Dev coordination
   - technologies
   - dealing with failing scenarios
 - Twist demo
   - sales pitch
   - refactoring
   - reuse and intellisense
   - drivers
   - recording implementations
   - organizing scenarios
   - show unimplemented stuff
 - outro
   - twist
   - acknowledgements
   - sdd summary
   - two things to remember

new
 - first scenario: walking skeleton
 - possibility of non-automated approach
 - workflow vs actor layer
 - definition: readable by everyone

what you leave out of your tests is as important as what you put in

collaboration in defining scenarios
 - tools (e.g. twist, cucumber) can be used to help this
 - or through discussion and just use code

pitfalls of acceptance testing
 - too many
 - slow
 - hard to maintain
 - fragile
 - have to keep changing

tensions
 - speed
 - readability
 - impression of application and what is important
 - coverage
 - completeness
 - maintenance effort
 - reliability
