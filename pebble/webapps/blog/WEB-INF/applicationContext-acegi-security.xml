<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

   <!-- ======================== FILTER CHAIN ======================= -->

  <bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
    <property name="filterInvocationDefinitionSource">
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /xmlrpc/**=anonymousProcessingFilter
        /**/*.xml=httpSessionContextIntegrationFilter,basicProcessingFilter,rememberMeProcessingFilter,basicExceptionTranslationFilter,privateBlogInvocationInterceptor,filterInvocationInterceptor
        /**=httpSessionContextIntegrationFilter,formProcessingFilter,rememberMeProcessingFilter,formExceptionTranslationFilter,privateBlogInvocationInterceptor,filterInvocationInterceptor
      </value>
    </property>
  </bean>

   <!-- ======================== AUTHENTICATION ======================= -->

  <bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
    <property name="providers">
      <list>
        <ref local="daoAuthenticationProvider"/>
        <ref local="rememberMeAuthenticationProvider"/>
      </list>
    </property>
  </bean>

  <bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService"><ref local="pebbleUserDetailsService"/></property>
    <property name="passwordEncoder"><ref local="passwordEncoder"/></property>
    <property name="saltSource"><ref bean="saltSource"/></property>
  </bean>

  <!-- this is a default implementation of Acegi's UserDetailsService that plugs into the
       daoAuthenticationProvider - you don't need this if you are using an alternative
       UserDetailsService or another AuthenticationProvider -->
  <bean id="pebbleUserDetailsService" class="net.sourceforge.pebble.security.DefaultUserDetailsService">
    <property name="securityRealm"><ref bean="pebbleSecurityRealm"/></property>
  </bean>

  <!-- an implementation of net.sourceforge.pebble.security.SecurityRealm is required
       to provide detailed user information and manage users
       it is plugged into other components outside the context of this file -->
  <bean id="pebbleSecurityRealm" class="net.sourceforge.pebble.security.DefaultSecurityRealm" init-method="init">
    <property name="configuration"><ref bean="pebbleConfiguration"/></property>
    <property name="passwordEncoder"><ref local="passwordEncoder"/></property>
    <property name="saltSource"><ref bean="saltSource"/></property>
  </bean>

  <bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.ShaPasswordEncoder"/>

  <bean id="saltSource" class="org.acegisecurity.providers.dao.salt.ReflectionSaltSource">
    <property name="userPropertyToUse" value="getUsername" />
  </bean>

   <!-- Automatically receives AuthenticationEvent messages -->
   <bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener"/>

  <bean id="httpSessionContextIntegrationFilter" class="org.acegisecurity.context.HttpSessionContextIntegrationFilter" />

  <bean id="rememberMeProcessingFilter" class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
    <property name="rememberMeServices"><ref local="rememberMeServices"/></property>
    <property name="authenticationManager"><ref local="authenticationManager"/></property>
  </bean>

  <bean id="rememberMeServices" class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
    <property name="userDetailsService"><ref local="pebbleUserDetailsService"/></property>
    <property name="key"><value>pebble</value></property>
  </bean>

  <bean id="rememberMeAuthenticationProvider" class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
    <property name="key"><value>pebble</value></property>
  </bean>

  <bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter" />

   <!-- ===================== HTTP REQUEST SECURITY ==================== -->

  <bean id="anonymousProcessingFilter" class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
    <property name="key"><value>anonymous</value></property>
    <property name="userAttribute"><value>anonymousUser,ROLE_ANONYMOUS</value></property>
  </bean>

  <bean id="formProcessingFilter" class="net.sourceforge.pebble.security.AuthenticationProcessingFilter">
    <property name="authenticationManager"><ref bean="authenticationManager"/></property>
    <property name="authenticationFailureUrl"><value>/loginPage.action?error=true</value></property>
    <property name="defaultTargetUrl"><value>/</value></property>
    <property name="filterProcessesUrl"><value>/j_acegi_security_check</value></property>
    <property name="rememberMeServices"><ref local="rememberMeServices"/></property>
  </bean>

  <bean id="formAuthenticationProcessingFilterEntryPoint" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
    <property name="loginFormUrl"><value>/loginPage.action</value></property>
    <property name="forceHttps"><value>false</value></property>
  </bean>

  <bean id="formExceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint"><ref local="formAuthenticationProcessingFilterEntryPoint"/></property>
  </bean>

  <bean id="httpRequestAccessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
    <property name="allowIfAllAbstainDecisions"><value>false</value></property>
    <property name="decisionVoters">
      <list>
        <ref bean="roleVoter"/>
      </list>
    </property>
  </bean>

  <bean id="basicProcessingFilter" class="org.acegisecurity.ui.basicauth.BasicProcessingFilter">
    <property name="authenticationManager"><ref bean="authenticationManager"/></property>
    <property name="authenticationEntryPoint"><ref bean="basicAuthenticationEntryPoint"/></property>
  </bean>

  <bean id="basicAuthenticationEntryPoint" class="org.acegisecurity.ui.basicauth.BasicProcessingFilterEntryPoint">
    <property name="realmName"><value>Secured newsfeeds</value></property>
  </bean>

  <bean id="basicExceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint"><ref local="basicAuthenticationEntryPoint"/></property>
  </bean>

  <!-- Note the order that entries are placed against the objectDefinitionSource is critical.
  The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern that matches the request URL.
  Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*) expressions last -->
  <bean id="filterInvocationInterceptor" class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
    <property name="authenticationManager"><ref bean="authenticationManager"/></property>
    <property name="accessDecisionManager"><ref local="httpRequestAccessDecisionManager"/></property>
    <property name="objectDefinitionSource">
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /**/*.secureaction=ROLE_BLOG_OWNER,ROLE_BLOG_PUBLISHER,ROLE_BLOG_CONTRIBUTOR,ROLE_BLOG_ADMIN,ROLE_BLOG_READER
        /**/files/=ROLE_BLOG_CONTRIBUTOR
        /**/images/=ROLE_BLOG_CONTRIBUTOR
        /**/theme/**=ROLE_BLOG_OWNER
        /**/help/**=ROLE_BLOG_OWNER,ROLE_BLOG_PUBLISHER,ROLE_BLOG_CONTRIBUTOR
      </value>
    </property>
  </bean>

  <!-- ===================== PRIVATE BLOG SECURITY ==================== -->

  <bean id="privateBlogRoleVoter" class="net.sourceforge.pebble.security.PrivateBlogVoter" />

  <bean id="privateBlogAccessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
    <property name="allowIfAllAbstainDecisions"><value>false</value></property>
    <property name="decisionVoters">
      <list>
        <ref bean="privateBlogRoleVoter"/>
      </list>
    </property>
  </bean>

  <bean id="privateBlogInvocationInterceptor" class="net.sourceforge.pebble.security.PrivateBlogSecurityInterceptor">
    <property name="authenticationManager"><ref bean="authenticationManager"/></property>
    <property name="accessDecisionManager"><ref local="privateBlogAccessDecisionManager"/></property>
  </bean>

</beans>